React理念

从官网可以看到React理念： 我们认为，React 是用 JavaScript 「构建快速」响应的大型 Web 应用程序的首选方式。
  可见，关键点是实现【快速响应】，那引发思考：什么是制约快速响应的呢？
  在日常使用App，浏览器的时候，有两类场景会制约【快速响应】：
  - 遇到大量计算的操作或者浏览器的性能不足的时候，会出现掉帧，或者卡顿的现象
  - 发送网络请求后，由于需要等待数据返回，才能进一步操作导致不能快速响应
  这两类场景可以概括为： CPU瓶颈  IO瓶颈
  React是如何解决这些问题呢？

  #1.CPU的瓶颈
    当项目变得庞大，组件数量繁多的时候就会遇到CPU瓶颈，考虑如下Dom，我们向视图中渲染3000个li
    代码:
    function App() {
      const len = 3000;
      return (
        <ul>
          {Array(len).fill(0).map((_, i) => <li>{i}</li>)}
        </ul>
      );
    }

    const rootEl = document.querySelector("#root");
    ReactDOM.render(<App/>, rootEl);
  主浏览器的渲染是60HZ，即每秒（1000ms/60）16.6ms刷新一次。
  我们知道JS操作DOM，GUI渲染线程与JS线程是互斥的，所以JS执行脚本和浏览器的布局、绘制。但是不能同时执行
  在每一个16.6ms浏览器要执行的任务： JS脚本->样式布局->样式重绘
  当执行JS时间超过16.6ms的时候，这1HZ就没有时间让浏览器布局和绘制了

  如何解决这类问题呢？
  在每1HZ，留一部分时间给JS，其他的时间交给浏览器，当预留的时间不够用时，React将线程控制权交还给浏览器使其有时间渲染UI，React则等待下一帧时间到来继续被中断的工作。


  #2.IO瓶颈
  React实现了Suspense
